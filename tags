!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	M,module	/modules/
!_TAG_KIND_DESCRIPTION!C++	P,partition	/partitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/jin/ManagementSystem/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/p6.1.20250302.0/
!_TAG_ROLE_DESCRIPTION!C++!header	exported	/exported with "exported imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!module	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!module	partOwner	/used for specifying a partition/
!_TAG_ROLE_DESCRIPTION!C++!partition	imported	/imported with "imported ..."/
AddCommand	Command.h	/^        AddCommand(TaskManager& manager): taskManager(manager){ }$/;"	f	class:AddCommand
AddCommand	Command.h	/^class AddCommand: public Command<AddCommand> { $/;"	c
AddTask	TaskManager.cpp	/^void TaskManager::AddTask(int priority, const std::string description, const std::string dueDate/;"	f	class:TaskManager	typeref:typename:void
COMMAND_H_	Command.h	/^#define COMMAND_H_$/;"	d
Command	Command.h	/^class Command: public CommandBase{$/;"	c
CommandBase	Command.h	/^class CommandBase{$/;"	c
CompareByDeDate	TaskManager.cpp	/^bool TaskManager::CompareByDeDate(const Task& a, const Task& b){$/;"	f	class:TaskManager	typeref:typename:bool
CompareByPriority	TaskManager.cpp	/^bool TaskManager::CompareByPriority(const Task& a, const Task& b){$/;"	f	class:TaskManager	typeref:typename:bool
DelCommand	Command.h	/^        DelCommand(TaskManager& manager): taskManager(manager){ }$/;"	f	class:DelCommand
DelCommand	Command.h	/^class DelCommand: public Command<DelCommand> {$/;"	c
DeleteTask	TaskManager.cpp	/^void TaskManager::DeleteTask(int id){$/;"	f	class:TaskManager	typeref:typename:void
GetInstance	Logger.cpp	/^Logger& Logger::GetInstance(){$/;"	f	class:Logger	typeref:typename:Logger &
LOGER_H_	Logger.h	/^#define LOGER_H_$/;"	d
ListCommand	Command.h	/^        ListCommand(TaskManager & manager):taskManager(manager){ }$/;"	f	class:ListCommand
ListCommand	Command.h	/^class ListCommand: public Command<ListCommand>{$/;"	c
ListTasks	TaskManager.cpp	/^void TaskManager::ListTasks(int sortoption) const{$/;"	f	class:TaskManager	typeref:typename:void
LoadTasks	TaskManager.cpp	/^void TaskManager::LoadTasks(){$/;"	f	class:TaskManager	typeref:typename:void
LogFile	Logger.h	/^        std::ofstream LogFile;$/;"	m	class:Logger	typeref:typename:std::ofstream
Logger	Logger.cpp	/^Logger::Logger(){$/;"	f	class:Logger
Logger	Logger.h	/^class Logger{$/;"	c
NexId	TaskManager.h	/^        int NexId;$/;"	m	class:TaskManager	typeref:typename:int
SaveTasks	TaskManager.cpp	/^void TaskManager::SaveTasks() const{$/;"	f	class:TaskManager	typeref:typename:void
TASKMANAGER_H_	TaskManager.h	/^#define TASKMANAGER_H_$/;"	d
TASK_H_	Task.h	/^#define TASK_H_$/;"	d
Task	Task.h	/^struct Task{$/;"	s
TaskManager	TaskManager.cpp	/^TaskManager::TaskManager(): NexId(1){$/;"	f	class:TaskManager
TaskManager	TaskManager.h	/^class TaskManager{$/;"	c
ToString	Task.h	/^    std::string ToString() const{$/;"	f	struct:Task	typeref:typename:std::string
UpdateCommand	Command.h	/^        UpdateCommand(TaskManager & manager):taskManager(manager){ }$/;"	f	class:UpdateCommand
UpdateCommand	Command.h	/^class UpdateCommand: public Command<UpdateCommand>{$/;"	c
UpdateTask	TaskManager.cpp	/^void TaskManager::UpdateTask(int id, int priority, const std::string description, const std::str/;"	f	class:TaskManager	typeref:typename:void
__anone11362040102	TaskManager.cpp	/^    auto it = std::find_if(tasks.begin(), tasks.end(), [id](const Task& task){$/;"	f	function:TaskManager::DeleteTask	file:
description	Task.h	/^    std::string description;$/;"	m	struct:Task	typeref:typename:std::string
dueDate	Task.h	/^    std::string dueDate;$/;"	m	struct:Task	typeref:typename:std::string
execute	Command.h	/^        void execute(const std::string& args){$/;"	f	class:Command	typeref:typename:void
executeImpl	Command.h	/^        void executeImpl(const std::string args){$/;"	f	class:ListCommand	typeref:typename:void
executeImpl	Command.h	/^        void executeImpl(const std::string args){$/;"	f	class:UpdateCommand	typeref:typename:void
executeImpl	Command.h	/^        void executeImpl(const std::string& args){$/;"	f	class:AddCommand	typeref:typename:void
executeImpl	Command.h	/^        void executeImpl(const std::string& args){$/;"	f	class:DelCommand	typeref:typename:void
id	Task.h	/^    int id;$/;"	m	struct:Task	typeref:typename:int
log	Logger.cpp	/^void Logger::log(const std::string &message){$/;"	f	class:Logger	typeref:typename:void
main	main.cpp	/^int main(){$/;"	f	typeref:typename:int
mtx	Logger.h	/^        std::mutex mtx;$/;"	m	class:Logger	typeref:typename:std::mutex
priority	Task.h	/^    int priority;$/;"	m	struct:Task	typeref:typename:int
taskManager	Command.h	/^        TaskManager& taskManager;$/;"	m	class:AddCommand	typeref:typename:TaskManager &
taskManager	Command.h	/^        TaskManager& taskManager;$/;"	m	class:DelCommand	typeref:typename:TaskManager &
taskManager	Command.h	/^        TaskManager& taskManager;$/;"	m	class:ListCommand	typeref:typename:TaskManager &
taskManager	Command.h	/^        TaskManager& taskManager;$/;"	m	class:UpdateCommand	typeref:typename:TaskManager &
tasks	TaskManager.h	/^        std::vector<Task> tasks;$/;"	m	class:TaskManager	typeref:typename:std::vector<Task>
~Logger	Logger.cpp	/^Logger::~Logger(){$/;"	f	class:Logger
